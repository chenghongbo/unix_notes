1. add external IP to adminui and imgapi
	sdcadm post-setup common-external-nics

2. get IP address of adminui
	sdc-vmadm ips -p $(sdc-vmname adminui)

3. Adding the cloudapi core service zone
	In order to use either the smartdc or triton you will need to install the cloudapi zone. Additionally, this is required if you will be running the end-user portal.

	sdcadm post-setup cloudapi
	sdc-vmadm ips -p $(sdc-vmname cloudapi)

4. Linking Triton data centers

# make headnode provisionable, for development env
sdcadm post-setup dev-headnode-prov

Triton supports UFDS linking, which allows two data center to share key user data, including ssh keys, passwords, and RBAC information. UFDS or Data Center Linking must be done after installing the head node in second and subsequent Triton Installations; to link two data centers, please follow the instructions at Linking Triton data centers.


#===== troubleshoot compute node setup failure ===========
1. Find the IP of the compute node from the Admin UI
2. Obtain the compute node root password by running /usbkey/scripts/mount-usb.sh && cat /mnt/usbkey/private/root.password.* on your headnode. 
3. Login to the compute node. Run bunyan $(svcs -L ur) on the compute node and check the output for errors.
4. the error I found on my computer node is:
	17 May 14:09:01 ntpdate[3809]: no server suitable for synchronization found\'\\\'\'\'\n
	[2016-05-17T14:09:17Z] ./joysetup.sh:80: fatal(): exit 1\n'


to resolve, set up a local NTP server 

#------------- another failure ------------
[2016-04-24T06:14:42Z] ./joysetup.sh:332: create_zpool(): /usr/bin/mkzpool zones /tmp/pool.json\nfatal error: pool creation failed: invalid vdev specification\nuse \'-f\' to override the following errors:\n/dev/dsk/c1d0s0 contains a pcfs filesystem.\n\n[2016-04-24T06:14:43Z] ./joysetup.sh:333: create_zpool(): printf \'%6s\\n\' failed\n[2016-04-24T06:14:43Z] ./joysetup.sh:334: create_zpool(): fatal \'failed to create pool\'\n[2016-04-24T06:14:43Z] ./joysetup.sh:79: fatal(): echo \'Error: failed to create pool\'\n[2016-04-24T06:14:43Z] ./joysetup.sh:80: fatal(): exit 1\n',


delete all partitions in gparted

# ------------- Manual server does not meet NIC Tag requirements ----

Came up when run 'sdcadm experimental update-docker --servers cns'
Fix: add external NIC tag via admin UI for the compute node in question
external NIC was not connected during compute node setup. otherwise this wouldn't be a problem


# this script is a copy of the info from link below on 06-01-2016
# its purpose is to stop the “requests must originate from CNAPI address” when trying to provision a new machine after I reboot the system... odd error and fix but works after every reboot like clockwork

sdcadm self-update --latest &&

sdcadm dc-maint --start &&

ls -alh /usbkey/extra/agents/|grep $(updates-imgadm list --latest name=agentsshar -o uuid -H) &&

sdcadm experimental update-agents --latest --all --yes &&

sdcadm experimental update-docker --servers=cns,headnode &&

sdcadm experimental update-other && 

sdcadm experimental update-gz-tools --latest &&

sdcadm up -y --all --force-data-path &&

sdcadm dc-maint --stop &&

sdc-healthcheck &&

sdcadm health

#https://github.com/joyent/sdcadm/blob/master/docs/update.md

#Step 10: Test! It's good to at minimum do a:

# docker run -it ubuntu



============================ docker client setup output =========================
acheng@iris:~$ sdc-docker/tools/sdc-docker-setup.sh -k
SDC CloudAPI URL [https://us-east-1.api.joyent.com]: https://cloudapi.masan.keda.local
SDC account: acheng
SSH private key [/home/acheng/.ssh/id_rsa]: 

Setting up Docker client for SDC using:
    CloudAPI:        https://cloudapi.masan.keda.local
    Account:         acheng
    Key:             /home/acheng/.ssh/id_rsa

If you have a pass phrase on your key, the openssl command will
prompt you for your pass phrase now and again later.

Verifying CloudAPI access.
CloudAPI access verified.

Generating client certificate from SSH private key.
Wrote certificate files to /home/acheng/.sdc/docker/acheng

Get Docker host endpoint from cloudapi.
Docker service endpoint is: tcp://192.168.3.34:2376

* * *
Success. Set your environment as follows: 

    export DOCKER_CERT_PATH=/home/acheng/.sdc/docker/acheng
    export DOCKER_HOST=tcp://192.168.3.34:2376
    export DOCKER_CLIENT_TIMEOUT=300
    export COMPOSE_HTTP_TIMEOUT=300
    unset DOCKER_TLS_VERIFY
    alias docker="docker --tls"

Your Docker host is not a DNS name, but an IP. If you want to run docker
with TLS verification, you can configure to use a 'my.triton' DNS
name as follows (use this instead of the setup block above):

    sudo sed -e '$G; $s/$/192.168.3.34 my.triton/;' -i.bak /etc/hosts
    export DOCKER_CERT_PATH=/home/acheng/.sdc/docker/acheng
    export DOCKER_HOST=tcp://my.triton:2376
    export DOCKER_TLS_VERIFY=1
    export DOCKER_CLIENT_TIMEOUT=300
    export COMPOSE_HTTP_TIMEOUT=300

Then you should be able to run 'docker info' and see your account
name 'SDCAccount: acheng' in the output.

Note: If you receive any docker compose warning about the
DOCKER_CLIENT_TIMEOUT environment variable being deprecated,
simply unset it and remove it from env.sh.
