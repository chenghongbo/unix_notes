Features provided by systemd:

•  Parallelization capabilities, which increase the boot speed of a  system. 
•  On-demand starting of daemons without requiring a  separate service. 
•  Automatic service dependency management prevents  long  timeouts, such as not starting a network service when the network  is  not available. 
•  A method of tracking related processes together using Linux control  groups. 



 
[root@serverx  -]#  systemctl  status  sshd.service 
'  sshd.service  - OpenSSH  server  daemon 
	Loaded :  loaded  (/usr/lib/systemd/system/sshd.service;  enabled ) 
	Active :  active  (running )  since  Thu  2014-02-27  11:51:39  EST;  7h  ago 
	Main  PID : 1073 (sshd ) 
	CG group : /system.slice/sshd.service 
			   L. 1073  /usr/sbin/sshd  -D 
Feb  27  11 :51:39  server0.example.com  systemd [1] :  Started  OpenSSH  se rver  daemon . 
Feb  27  11 :51:39  server0.example.com  sshd [1073] :  Could  not  load  host  key :  /et  ...  y 
Feb  27  11 :51:39  server0.example.com  sshd [1073] :  Server  lis tening  on  0.0.0.0  ...  . 
Feb  27  11 :51:39  server0.example.com  sshd [1073] :  Server  listening  on  ::  port  22 . 
Feb  27  11 :53:21  server0.example.com  sshd [1270] :  error:  Could  not  load  host  k ...  y 
Feb  27  11 :53:22  server0.example.com  sshd [1270] :  Accepted  pas swo rd  for root  f ...  2 
Hint :  Some  lines  were  ellipsized ,  use  -1  to  show in  full . 

-------------------------------------------------------------------------------------------------
Keyword:  			|	Description: 
-------------------------------------------------------------------------------------------------
loaded  			|	Unit  conf iguration file has been processed. 
active (running)  	|	Running with one or more  continuing processes. 
active (exited)  	|	Successfully completed a  one-time configuration. 
active (waiting)  	|	Running but waiting for an event. 
inactive  			|	Not  running. 
enabled  			|	Will be started at boot time. 
disabled  			|	Will not be started at boot time. 
static  			|	Can not be enabled, but may be started by an enabled unit automatically. 
-------------------------------------------------------------------------------------------------


Query  the state of  all units to verify a  system startup. 
  [root@serverx  -]#  systemctl 

Query the state of only the service units. 
[ root@serverx  - ]#  systemctl -type=service 

Investigate any units which are  in a  failed or maintenance  state. Optionally,  add the  -1  option to show the full output. 
 [root@serverX  -]#  systemctl  status  rngd.service  -1 

The status argument may also be  used to  determine if a  particular unit is  active and show  if 
the unit  is enabled to start at boot time. Alternate commands can also easily show the active and enabled  states: 

[root@serverx  -]#  systemctl  is-enabled  sshd
[root@serverx  -]#  systemctl  is-active  sshd

View the enabled and disabled  settings for all units. Optionally,  limit  the type of  unit. 

systemctl  list-unit-files  --type=service

See only failed services：
systemctl  --failed  --type=service



[root@serverx  -]#  systemctl start sshd.service
[root@serverx  -]#  systemctl stop sshd.service

[root@serverx  -]#  systemctl restart sshd.service
[root@serverx  -]#  systemctl staus sshd.service

[root@serverx  -]#  systemctl reload sshd.service


Unit dependencies 
Services may be  started  as  dependencies of other services.  If a socket unit is enabled  and the 
service unit with the same name is not, the service will automatically  be started when a  request 
is made on the network socket. Services may also  be triggered by path units when a  file system 
condition is met. 

The systemctl  list-dependencies  UNIT 

command can be used to display a  tree of other 
units which must  be started in conjunction with a  specific unit. The  --reverse option to this 
command will show what units need to have the specified unit started in order to run.

 
Masking services 
A system may have conflicting services installed for a certain function, such as firewalls (iptables 
and firewalld). To  prevent an administrator from accidentally starting a  service, a  service may be 
masked. Masking creates a  link in the configuration directories so that if the service is started, 
nothing will happen.

[root@serverx  -]#  systemctl mask network
ln -s '/dev/null' '/etc/systemd/system/network.service'


---------------------------------------------------------------------------------------------------------------------
Command:  					        |  Task: 
---------------------------------------------------------------------------------------------------------------------
systemctl  status  UNIT  			|	View detailed information about a  unit state. 
systemctl  stop  UNIT  	 			|	Stop a  service on a  running  system. 
systemctl  start  UNIT   			|	Start a  service on a  running system. 
systemctl  restart  UNIT  			|	Restart a  service on a  running system. 
systemctl  reload  UNIT  			|	Reload configuration file of a  running service. 
systemctl  mask  UNIT    			|	Completely disable a  service from being started, both manually and at boot. 
systemctl  unmask  UNIT  			|	Make a masked service available. 
systemctl  enable  UNIT  			|	Configure a  service to  start at  boot time. 
systemctl  disable  UNIT 			|	Disable a  service from starting at  boot time. 
systemctl  list-dependencies UNIT	| List units which are  required and wanted by the specified unit. 
---------------------------------------------------------------------------------------------------------------------


A systemd target  is a set of systemd units that should be started to reach a  desired state. 
Important targets are  listed  in the  following table. 

-----------------------------------------------------------------------------------
Target  			|	Purpose 
-----------------------------------------------------------------------------------
graphical.target  	|	System supports multiple users, graphical and text-based logins. 
multi-user.target  	|	System supports multiple users, text-based  logins only. 
rescue.target  		|	sulogin prompt. basic system  initialization completed. 
emergency.target  	|	sulogin prompt. initramfs pivot complete and system root mounted on / read-only. 
-----------------------------------------------------------------------------------

[root@serverX  -]#  systemctl  list-units  --type=target  --all

On a running system, administrators  can choose to switch to a  different target using the 
systemctl  isolate command; for example,  

	systemctl  isolate multi-user.target 
	
Selecting a  different target at  boot time
 
To select a  different target at boot time, a  special option can be appended to the kernel 
command line from the boot loader: systemd.unit=. For example,  to boot  the system  into a 
rescue shell, pass the following option at  the interactive boot  loader menu: 

systemd.unit=rescue.target 


To  use this method of selecting a  different target, use the following procedure for Red Hat 
Enterprise Linux 7  systems: 
1.  (Re)boot the system. 
2.  Interrupt the boot  loader menu  countdown by pressing any key. 
3.  Move the cursor to  the entry to be started. 
4.  Press e to edit  the current entry. 
5.  Move  the cursor to the  line that starts with linux16. This  is the kernel command li ne. 
6.  Append systemd.unit=desired.target. 
7.  Press Ctrl +x  to  boot with these changes.


--- reset lost root password:

On Red Hat Enterprise Linux 7,  it is  possible to  have the scripts that run from the initramfs 
pause at certain points, provide a  root shell, and then continue when that shell exits. While this 
is mostly meant  for debugging,  it can also be used to recover a  lost root password: 
1.  Reboot the system. 
2.  Interrupt  the boot  loader countdown by pressing any  key. 
3.  Move the cursor to the entry  that needs to be booted. 
4.  Press e to edit the selected entry. 
5.  Move the cursor to the kernel command line (the  line that  starts with linux16. 
6.  Append rd.break (this will break just  before control  is handed  from the initramfs to the actual system). 
7.  Press Ctrl +x  to  boot with the changes.
 
At this point, a  root  shell will be presented, with the  root file system for the actual system mounted read-only on /sysroot.

To recover  the root password from this point. use the following procedure: 
1.  Remount /sysroot as read-write 
		mount  -oremount,rw  /sysroot
2. Switch  into a  chroot jail, where /sysroot  is treated  as the  root of the file system tree. 
		chroot /sysroot
3. Set a new root password: 
		passwd root
4. Make sure that all unlabeled files  (including /etc/shadow at this point) get relabeled during boot.
		touch  /.autorelabel 
5. Type exit twice. The first will exit the chroot jail, and the second will exit the initramfs debug shell. 

Diag nose and repair systemd boot  issues 

If there are problems during the starting of services, there are a few tools available to system 
administrators that can help with debugging and/or troubleshooting: 

Early debug shell 
By running systemctl  enable  debug-shell.service, a  root shell will be spawned on 
TTV9  (Ctrl+Alt+F9) early during the boot  sequence. This shell is automatically logged in as 
root so that an administrator can use some of the other debugging tools while the system  is still booting. 

Emergency and  rescue ta rgets 
By appending either systemd.unit=rescue.target or systemd.unit=emergency.target to  the  kernel command 
line from the boot loader, the system will spawn into a special rescue or emergency shell instead of starting normally.  Both of these shells require the root password. The emergency target keeps the root file system 
mounted read-only, while rescue.target waits for sysinit.target to complete first so that more of the system will be 
initialized, for example,  logging, file systems, etc. Exiting from these shells will continue with the  regular boot process.

Stuck  jobs 
During startup, systemd spawns a number of jobs.  If some of these jobs can not complete, they 
will block other jobs from running. To inspect the current job list. an administrator can use the 
command systemctl list-jobs. Any  jobs listed as running must complete before the jobs 
listed as waiting can continue. 